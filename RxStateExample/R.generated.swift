//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `diselected`.
    static let diselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "diselected")
    /// Image `selected`.
    static let selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected")
    
    /// `UIImage(named: "diselected", bundle: ..., traitCollection: ...)`
    static func diselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selected", bundle: ..., traitCollection: ...)`
    static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `AddTaskTableViewCell`.
    static let addTaskTableViewCell = _R.nib._AddTaskTableViewCell()
    /// Nib `TaskTableViewCell`.
    static let taskTableViewCell = _R.nib._TaskTableViewCell()
    /// Nib `TasksViewController`.
    static let tasksViewController = _R.nib._TasksViewController()
    
    /// `UINib(name: "AddTaskTableViewCell", in: bundle)`
    static func addTaskTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addTaskTableViewCell)
    }
    
    /// `UINib(name: "TaskTableViewCell", in: bundle)`
    static func taskTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taskTableViewCell)
    }
    
    /// `UINib(name: "TasksViewController", in: bundle)`
    static func tasksViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tasksViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TaskTableViewCell`.
    static let taskTableViewCell: Rswift.ReuseIdentifier<TaskTableViewCell> = Rswift.ReuseIdentifier(identifier: "TaskTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _TaskTableViewCell.validate()
    }
    
    struct _AddTaskTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddTaskTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddTaskTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddTaskTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TaskTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TaskTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "TaskTableViewCell"
      let name = "TaskTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TaskTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TaskTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected' is used in nib 'TaskTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "diselected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'diselected' is used in nib 'TaskTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TasksViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TasksViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}